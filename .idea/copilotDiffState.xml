<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    id(&quot;app.cash.sqldelight&quot;)&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.adilstudio.project.onevault&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.adilstudio.project.onevault&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;&#10;    // Jetpack Compose&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;    implementation(libs.androidx.navigation.compose)&#10;    implementation(libs.androidx.compose.ui)&#10;    implementation(libs.androidx.compose.ui.graphics)&#10;    implementation(libs.androidx.compose.ui.tooling.preview)&#10;    implementation(libs.androidx.compose.material3)&#10;    implementation(libs.androidx.compose.icons.extended)&#10;&#10;    // Koin (Dependency Injection)&#10;    implementation(libs.koin.android)&#10;    implementation(libs.koin.androidx.compose)&#10;&#10;    // Coroutines&#10;    implementation(libs.coroutines.android)&#10;&#10;    // SQLDelight (Local Database)&#10;    implementation(libs.sqldelight.android.driver)&#10;    implementation(libs.sqldelight.coroutines.extensions)&#10;&#10;    // Ktor (Networking)&#10;    implementation(libs.ktor.client.android)&#10;    implementation(libs.ktor.client.content.negotiation)&#10;    implementation(libs.ktor.serialization.kotlinx.json)&#10;&#10;    // Serialization&#10;    implementation(libs.kotlinx.serialization.json)&#10;&#10;    // Google ML Kit (OCR)&#10;    implementation(libs.google.mlkit.text.recognition)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#10;    id(&quot;app.cash.sqldelight&quot;)&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.adilstudio.project.onevault&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.adilstudio.project.onevault&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;&#10;    // Jetpack Compose&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;    implementation(libs.androidx.navigation.compose)&#10;    implementation(libs.androidx.compose.ui)&#10;    implementation(libs.androidx.compose.ui.graphics)&#10;    implementation(libs.androidx.compose.ui.tooling.preview)&#10;    implementation(libs.androidx.compose.material3)&#10;    implementation(libs.androidx.compose.icons.extended)&#10;&#10;    // Koin (Dependency Injection)&#10;    implementation(libs.koin.android)&#10;    implementation(libs.koin.androidx.compose)&#10;&#10;    // Coroutines&#10;    implementation(libs.coroutines.android)&#10;&#10;    // SQLDelight (Local Database)&#10;    implementation(libs.sqldelight.android.driver)&#10;    implementation(libs.sqldelight.coroutines.extensions)&#10;&#10;    // Ktor (Networking)&#10;    implementation(libs.ktor.client.android)&#10;    implementation(libs.ktor.client.content.negotiation)&#10;    implementation(libs.ktor.serialization.kotlinx.json)&#10;&#10;    // Serialization&#10;    implementation(libs.kotlinx.serialization.json)&#10;&#10;    // Google ML Kit (OCR)&#10;    implementation(libs.google.mlkit.text.recognition)&#10;&#10;    // Image Loading&#10;    implementation(libs.coil.compose)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/adilstudio/project/onevault/core/util/DateUtil.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/adilstudio/project/onevault/core/util/DateUtil.kt" />
              <option name="updatedContent" value="package com.adilstudio.project.onevault.core.util&#10;&#10;import java.time.LocalDate&#10;import java.time.format.DateTimeFormatter&#10;import java.time.format.DateTimeParseException&#10;&#10;object DateUtil {&#10;    &#10;    private val isoFormatter = DateTimeFormatter.ISO_LOCAL_DATE // YYYY-MM-DD&#10;    private val displayFormatter = DateTimeFormatter.ofPattern(&quot;dd MMM yyyy&quot;) // 01 Jan 2024&#10;    &#10;    /**&#10;     * Convert LocalDate to ISO string format (YYYY-MM-DD)&#10;     */&#10;    fun localDateToIsoString(date: LocalDate): String {&#10;        return date.format(isoFormatter)&#10;    }&#10;    &#10;    /**&#10;     * Convert ISO string to LocalDate&#10;     */&#10;    fun isoStringToLocalDate(dateString: String): LocalDate? {&#10;        return try {&#10;            LocalDate.parse(dateString, isoFormatter)&#10;        } catch (e: DateTimeParseException) {&#10;            null&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Format LocalDate for display (dd MMM yyyy)&#10;     */&#10;    fun formatDateForDisplay(date: LocalDate): String {&#10;        return date.format(displayFormatter)&#10;    }&#10;    &#10;    /**&#10;     * Get current date as ISO string&#10;     */&#10;    fun getCurrentDateAsIsoString(): String {&#10;        return LocalDate.now().format(isoFormatter)&#10;    }&#10;    &#10;    /**&#10;     * Get current date&#10;     */&#10;    fun getCurrentDate(): LocalDate {&#10;        return LocalDate.now()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/adilstudio/project/onevault/core/util/ImageUtil.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/adilstudio/project/onevault/core/util/ImageUtil.kt" />
              <option name="updatedContent" value="package com.adilstudio.project.onevault.core.util&#10;&#10;import android.content.Context&#10;import android.net.Uri&#10;import java.io.File&#10;import java.io.FileOutputStream&#10;import java.io.InputStream&#10;import java.util.UUID&#10;&#10;object ImageUtil {&#10;    &#10;    /**&#10;     * Save an image from URI to app's internal storage&#10;     * @param context Application context&#10;     * @param imageUri URI of the image to save&#10;     * @return Path of the saved image file, or null if failed&#10;     */&#10;    fun saveImageToInternalStorage(context: Context, imageUri: Uri): String? {&#10;        return try {&#10;            val inputStream: InputStream? = context.contentResolver.openInputStream(imageUri)&#10;            inputStream?.let { stream -&gt;&#10;                // Create unique filename&#10;                val fileName = &quot;bill_image_${UUID.randomUUID()}.jpg&quot;&#10;                val imagesDir = File(context.filesDir, &quot;images&quot;)&#10;                &#10;                // Create images directory if it doesn't exist&#10;                if (!imagesDir.exists()) {&#10;                    imagesDir.mkdirs()&#10;                }&#10;                &#10;                val imageFile = File(imagesDir, fileName)&#10;                val outputStream = FileOutputStream(imageFile)&#10;                &#10;                // Copy image data&#10;                stream.copyTo(outputStream)&#10;                &#10;                // Close streams&#10;                stream.close()&#10;                outputStream.close()&#10;                &#10;                // Return the file path&#10;                imageFile.absolutePath&#10;            }&#10;        } catch (e: Exception) {&#10;            e.printStackTrace()&#10;            null&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Delete an image file from internal storage&#10;     * @param imagePath Path of the image to delete&#10;     * @return true if deletion was successful, false otherwise&#10;     */&#10;    fun deleteImageFromInternalStorage(imagePath: String?): Boolean {&#10;        return try {&#10;            if (imagePath.isNullOrEmpty()) return true&#10;            &#10;            val file = File(imagePath)&#10;            if (file.exists()) {&#10;                file.delete()&#10;            } else {&#10;                true // File doesn't exist, consider it deleted&#10;            }&#10;        } catch (e: Exception) {&#10;            e.printStackTrace()&#10;            false&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Check if an image file exists&#10;     * @param imagePath Path of the image to check&#10;     * @return true if file exists, false otherwise&#10;     */&#10;    fun imageExists(imagePath: String?): Boolean {&#10;        return try {&#10;            if (imagePath.isNullOrEmpty()) return false&#10;            File(imagePath).exists()&#10;        } catch (e: Exception) {&#10;            false&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/adilstudio/project/onevault/di/appModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/adilstudio/project/onevault/di/appModule.kt" />
              <option name="originalContent" value="package com.adilstudio.project.onevault.di&#10;&#10;import android.app.Application&#10;import app.cash.sqldelight.db.SqlDriver&#10;import app.cash.sqldelight.driver.android.AndroidSqliteDriver&#10;import com.adilstudio.project.onevault.Database&#10;import com.adilstudio.project.onevault.data.security.SecurityManager&#10;import org.koin.android.ext.koin.androidContext&#10;import org.koin.dsl.module&#10;&#10;val appModule = module {&#10;    single { (app: Application) -&gt; SecurityManager(app) }&#10;&#10;    // SQLDelight Database setup&#10;    single&lt;SqlDriver&gt; {&#10;        AndroidSqliteDriver(Database.Schema, androidContext(), &quot;onevault.db&quot;)&#10;    }&#10;    single { Database(get()) }&#10;}&#10;" />
              <option name="updatedContent" value="package com.adilstudio.project.onevault.di&#10;&#10;import android.app.Application&#10;import app.cash.sqldelight.db.SqlDriver&#10;import app.cash.sqldelight.driver.android.AndroidSqliteDriver&#10;import com.adilstudio.project.onevault.Database&#10;import com.adilstudio.project.onevault.data.security.SecurityManager&#10;import org.koin.android.ext.koin.androidContext&#10;import org.koin.dsl.module&#10;&#10;val appModule = module {&#10;    single { (app: Application) -&gt; SecurityManager(app) }&#10;&#10;    // SQLDelight Database setup with versioning&#10;    single&lt;SqlDriver&gt; {&#10;        AndroidSqliteDriver(&#10;            schema = Database.Schema,&#10;            context = androidContext(),&#10;            name = &quot;onevault.db&quot;,&#10;            version = 2, // Increment version to trigger migration&#10;            callback = AndroidSqliteDriver.Callback(&#10;                schema = Database.Schema,&#10;                migrateCallback = { driver, oldVersion, newVersion -&gt;&#10;                    if (oldVersion &lt; 2) {&#10;                        // Migration from version 1 to 2: Make category nullable&#10;                        driver.execute(null, &quot;&quot;&quot;&#10;                            ALTER TABLE BillEntity RENAME TO BillEntity_old;&#10;                        &quot;&quot;&quot;.trimIndent(), 0)&#10;                        &#10;                        // Create new table with nullable category&#10;                        driver.execute(null, &quot;&quot;&quot;&#10;                            CREATE TABLE BillEntity (&#10;                                id INTEGER NOT NULL PRIMARY KEY,&#10;                                title TEXT NOT NULL,&#10;                                category TEXT,&#10;                                amount REAL NOT NULL,&#10;                                vendor TEXT NOT NULL,&#10;                                billDate TEXT NOT NULL,&#10;                                imagePath TEXT&#10;                            );&#10;                        &quot;&quot;&quot;.trimIndent(), 0)&#10;                        &#10;                        // Copy data from old table&#10;                        driver.execute(null, &quot;&quot;&quot;&#10;                            INSERT INTO BillEntity (id, title, category, amount, vendor, billDate, imagePath)&#10;                            SELECT id, title, category, amount, vendor, billDate, imagePath&#10;                            FROM BillEntity_old;&#10;                        &quot;&quot;&quot;.trimIndent(), 0)&#10;                        &#10;                        // Drop old table&#10;                        driver.execute(null, &quot;DROP TABLE BillEntity_old;&quot;, 0)&#10;                    }&#10;                }&#10;            )&#10;        )&#10;    }&#10;    single { Database(get()) }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/adilstudio/project/onevault/domain/model/Bill.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/adilstudio/project/onevault/domain/model/Bill.kt" />
              <option name="originalContent" value="package com.adilstudio.project.onevault.domain.model&#10;&#10;import kotlinx.serialization.Serializable&#10;import java.time.LocalDate&#10;&#10;@Serializable&#10;data class Bill(&#10;    val id: Long,&#10;    val title: String,&#10;    val category: String,&#10;    val amount: Double,&#10;    val vendor: String,&#10;    val billDate: String, // Store as ISO date string (YYYY-MM-DD)&#10;    val imagePath: String? = null // Optional image path&#10;)&#10;" />
              <option name="updatedContent" value="package com.adilstudio.project.onevault.domain.model&#10;&#10;import kotlinx.serialization.Serializable&#10;import java.time.LocalDate&#10;&#10;@Serializable&#10;data class Bill(&#10;    val id: Long,&#10;    val title: String,&#10;    val category: String? = null, // Optional category&#10;    val amount: Double,&#10;    val vendor: String,&#10;    val billDate: String, // Store as ISO date string (YYYY-MM-DD)&#10;    val imagePath: String? = null // Optional image path&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/adilstudio/project/onevault/presentation/bill/AddBillScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/adilstudio/project/onevault/presentation/bill/AddBillScreen.kt" />
              <option name="originalContent" value="package com.adilstudio.project.onevault.presentation.bill&#10;&#10;import android.Manifest&#10;import android.net.Uri&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.itemsIndexed&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.AttachFile&#10;import androidx.compose.material.icons.filled.CalendarToday&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.DatePicker&#10;import androidx.compose.material3.DatePickerDialog&#10;import androidx.compose.material3.DropdownMenuItem&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.ExposedDropdownMenuBox&#10;import androidx.compose.material3.ExposedDropdownMenuDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.material3.rememberDatePickerState&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.asImageBitmap&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import androidx.core.content.FileProvider&#10;import coil.compose.AsyncImage&#10;import com.adilstudio.project.onevault.core.util.DateUtil&#10;import com.adilstudio.project.onevault.core.util.ImageUtil&#10;import com.adilstudio.project.onevault.core.util.PermissionUtil&#10;import com.adilstudio.project.onevault.core.util.RupiahFormatter&#10;import com.adilstudio.project.onevault.domain.model.Bill&#10;import com.adilstudio.project.onevault.domain.model.BillCategory&#10;import com.adilstudio.project.onevault.presentation.bill.category.BillCategoryViewModel&#10;import com.google.mlkit.vision.common.InputImage&#10;import com.google.mlkit.vision.text.TextRecognition&#10;import com.google.mlkit.vision.text.latin.TextRecognizerOptions&#10;import org.koin.androidx.compose.koinViewModel&#10;import java.io.File&#10;import java.time.Instant&#10;import java.time.LocalDate&#10;import java.time.ZoneId&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun AddBillScreen(&#10;    viewModel: BillTrackerViewModel = koinViewModel(),&#10;    categoryViewModel: BillCategoryViewModel = koinViewModel(),&#10;    onBillAdded: () -&gt; Unit = {}&#10;) {&#10;    val context = LocalContext.current&#10;    val categories by categoryViewModel.categories.collectAsState()&#10;&#10;    var title by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedCategory by remember { mutableStateOf&lt;BillCategory?&gt;(null) }&#10;    var showCategoryDropdown by remember { mutableStateOf(false) }&#10;    var amountValue by remember { mutableStateOf(0L) } // Store as Long&#10;    var amountDisplay by remember { mutableStateOf(&quot;&quot;) } // Display formatted&#10;    var vendor by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    // Date picker state&#10;    var selectedDate by remember { mutableStateOf(LocalDate.now()) }&#10;    var showDatePicker by remember { mutableStateOf(false) }&#10;    val datePickerState = rememberDatePickerState(&#10;        initialSelectedDateMillis = System.currentTimeMillis()&#10;    )&#10;&#10;    // Image handling state&#10;    var selectedImageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;    var savedImagePath by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    // MLKit scanning state&#10;    var scannedTexts by remember { mutableStateOf&lt;List&lt;String&gt;&gt;(emptyList()) }&#10;    var showTextSelectionDialog by remember { mutableStateOf(false) }&#10;    var cameraImageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;    var isScanning by remember { mutableStateOf(false) }&#10;&#10;    // Permission state&#10;    var showPermissionDialog by remember { mutableStateOf(false) }&#10;    var hasCameraPermission by remember {&#10;        mutableStateOf(PermissionUtil.isCameraPermissionGranted(context))&#10;    }&#10;&#10;    // Image picker launcher&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        uri?.let {&#10;            selectedImageUri = it&#10;            // Save image to internal storage&#10;            val imagePath = ImageUtil.saveImageToInternalStorage(context, it)&#10;            savedImagePath = imagePath&#10;        }&#10;    }&#10;&#10;    // Camera launcher&#10;    val cameraLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.TakePicture()&#10;    ) { success -&gt;&#10;        if (success &amp;&amp; cameraImageUri != null) {&#10;            isScanning = true&#10;            val image = InputImage.fromFilePath(context, cameraImageUri!!)&#10;            val recognizer = TextRecognition.getClient(TextRecognizerOptions.DEFAULT_OPTIONS)&#10;&#10;            recognizer.process(image)&#10;                .addOnSuccessListener { visionText -&gt;&#10;                    val texts = visionText.textBlocks&#10;                        .flatMap { it.lines }&#10;                        .map { it.text.trim() }&#10;                        .filter { it.isNotEmpty() }&#10;&#10;                    scannedTexts = texts&#10;                    isScanning = false&#10;&#10;                    if (texts.isNotEmpty()) {&#10;                        showTextSelectionDialog = true&#10;                    }&#10;                }&#10;                .addOnFailureListener {&#10;                    isScanning = false&#10;                    // Handle error if needed&#10;                }&#10;        }&#10;    }&#10;&#10;    // Function to launch camera&#10;    fun launchCamera() {&#10;        val imageFile = File(context.cacheDir, &quot;camera_image_${System.currentTimeMillis()}.jpg&quot;)&#10;        cameraImageUri = FileProvider.getUriForFile(&#10;            context,&#10;            &quot;${context.packageName}.fileprovider&quot;,&#10;            imageFile&#10;        )&#10;        cameraImageUri?.let { uri -&gt;&#10;            cameraLauncher.launch(uri)&#10;        }&#10;    }&#10;&#10;    // Permission launcher&#10;    val permissionLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.RequestPermission()&#10;    ) { isGranted -&gt;&#10;        hasCameraPermission = isGranted&#10;        if (isGranted) {&#10;            // Permission granted, proceed with camera&#10;            launchCamera()&#10;        } else {&#10;            // Permission denied, show explanation&#10;            showPermissionDialog = true&#10;        }&#10;    }&#10;&#10;    // Function to handle scan button click&#10;    fun handleScanButtonClick() {&#10;        if (hasCameraPermission) {&#10;            launchCamera()&#10;        } else {&#10;            permissionLauncher.launch(Manifest.permission.CAMERA)&#10;        }&#10;    }&#10;&#10;    Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {&#10;        Text(&quot;Add Bill&quot;, style = MaterialTheme.typography.headlineMedium)&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        OutlinedTextField(&#10;            value = title,&#10;            onValueChange = { title = it },&#10;            label = { Text(&quot;Title&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Category selection&#10;        ExposedDropdownMenuBox(&#10;            expanded = showCategoryDropdown,&#10;            onExpandedChange = { showCategoryDropdown = !showCategoryDropdown }&#10;        ) {&#10;            OutlinedTextField(&#10;                value = selectedCategory?.name ?: &quot;&quot;,&#10;                onValueChange = {},&#10;                label = { Text(&quot;Category (Optional)&quot;) },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .menuAnchor(),&#10;                readOnly = true,&#10;                trailingIcon = {&#10;                    ExposedDropdownMenuDefaults.TrailingIcon(expanded = showCategoryDropdown)&#10;                },&#10;                placeholder = { Text(&quot;No category selected&quot;) }&#10;            )&#10;&#10;            ExposedDropdownMenu(&#10;                expanded = showCategoryDropdown,&#10;                onDismissRequest = { showCategoryDropdown = false }&#10;            ) {&#10;                // Add option to clear selection&#10;                DropdownMenuItem(&#10;                    text = {&#10;                        Text(&#10;                            &quot;No Category&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    },&#10;                    onClick = {&#10;                        selectedCategory = null&#10;                        showCategoryDropdown = false&#10;                    }&#10;                )&#10;&#10;                categories.forEach { category -&gt;&#10;                    DropdownMenuItem(&#10;                        text = {&#10;                            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                                Text(&#10;                                    text = category.icon,&#10;                                    modifier = Modifier.padding(end = 8.dp)&#10;                                )&#10;                                Text(category.name)&#10;                            }&#10;                        },&#10;                        onClick = {&#10;                            selectedCategory = category&#10;                            showCategoryDropdown = false&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        OutlinedTextField(&#10;            value = amountDisplay,&#10;            onValueChange = { newValue -&gt;&#10;                // Only allow digits and format as Indonesian Rupiah&#10;                val digitsOnly = newValue.replace(Regex(&quot;[^0-9]&quot;), &quot;&quot;)&#10;                if (digitsOnly.length &lt;= 15) { // Reasonable limit for amount&#10;                    val longValue = digitsOnly.toLongOrNull() ?: 0L&#10;                    amountValue = longValue&#10;                    amountDisplay = RupiahFormatter.formatRupiahDisplay(longValue)&#10;                }&#10;            },&#10;            label = { Text(&quot;Amount&quot;) },&#10;            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),&#10;            modifier = Modifier.fillMaxWidth(),&#10;            placeholder = { Text(&quot;0&quot;) }&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        OutlinedTextField(&#10;            value = vendor,&#10;            onValueChange = { vendor = it },&#10;            label = { Text(&quot;Vendor&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Date picker field&#10;        OutlinedTextField(&#10;            value = DateUtil.formatDateForDisplay(selectedDate),&#10;            onValueChange = { },&#10;            label = { Text(&quot;Bill Date&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            readOnly = true,&#10;            trailingIcon = {&#10;                IconButton(onClick = { showDatePicker = true }) {&#10;                    Icon(Icons.Default.CalendarToday, contentDescription = &quot;Select Date&quot;)&#10;                }&#10;            }&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Image upload section&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;            )&#10;        ) {&#10;            Column(modifier = Modifier.padding(16.dp)) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&quot;Attachment (Optional)&quot;, style = MaterialTheme.typography.labelLarge)&#10;&#10;                    if (selectedImageUri != null || savedImagePath != null) {&#10;                        IconButton(&#10;                            onClick = {&#10;                                selectedImageUri = null&#10;                                savedImagePath?.let { ImageUtil.deleteImageFromInternalStorage(it) }&#10;                                savedImagePath = null&#10;                            }&#10;                        ) {&#10;                            Icon(Icons.Default.Delete, contentDescription = &quot;Remove Image&quot;)&#10;                        }&#10;                    }&#10;                }&#10;&#10;                if (selectedImageUri != null) {&#10;                    // Show selected image&#10;                    AsyncImage(&#10;                        model = selectedImageUri,&#10;                        contentDescription = &quot;Selected Image&quot;,&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(200.dp)&#10;                            .clip(RoundedCornerShape(8.dp)),&#10;                        contentScale = ContentScale.Crop&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                }&#10;&#10;                OutlinedButton(&#10;                    onClick = { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Icon(Icons.Default.AttachFile, contentDescription = null)&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;Choose Image&quot;)&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Scan Bill Button&#10;        Button(&#10;            onClick = { handleScanButtonClick() },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            enabled = !isScanning&#10;        ) {&#10;            if (isScanning) {&#10;                CircularProgressIndicator(modifier = Modifier.size(16.dp))&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Scanning...&quot;)&#10;            } else {&#10;                Text(&quot;Scan Bill&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Save Bill Button&#10;        Button(&#10;            onClick = {&#10;                val bill = Bill(&#10;                    id = System.currentTimeMillis(),&#10;                    title = title,&#10;                    category = selectedCategory?.name, // Pass null if no category selected&#10;                    amount = amountValue.toDouble(),&#10;                    vendor = vendor,&#10;                    billDate = DateUtil.localDateToIsoString(selectedDate),&#10;                    imagePath = savedImagePath&#10;                )&#10;                viewModel.addBill(bill)&#10;                onBillAdded()&#10;            },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Save Bill&quot;)&#10;        }&#10;    }&#10;&#10;    // Date Picker Dialog&#10;    if (showDatePicker) {&#10;        DatePickerDialog(&#10;            onDismissRequest = { showDatePicker = false },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        datePickerState.selectedDateMillis?.let { millis -&gt;&#10;                            selectedDate = Instant.ofEpochMilli(millis)&#10;                                .atZone(ZoneId.systemDefault())&#10;                                .toLocalDate()&#10;                        }&#10;                        showDatePicker = false&#10;                    }&#10;                ) {&#10;                    Text(&quot;OK&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showDatePicker = false }) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        ) {&#10;            DatePicker(state = datePickerState)&#10;        }&#10;    }&#10;&#10;    // Permission explanation dialog&#10;    if (showPermissionDialog) {&#10;        AlertDialog(&#10;            onDismissRequest = { showPermissionDialog = false },&#10;            title = { Text(&quot;Camera Permission Required&quot;) },&#10;            text = {&#10;                Text(&quot;This app needs camera permission to scan bills and extract text information. Please grant camera permission to use this feature.&quot;)&#10;            },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        showPermissionDialog = false&#10;                        permissionLauncher.launch(Manifest.permission.CAMERA)&#10;                    }&#10;                ) {&#10;                    Text(&quot;Grant Permission&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showPermissionDialog = false }) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;&#10;    // Text Selection Dialog&#10;    if (showTextSelectionDialog) {&#10;        TextSelectionDialog(&#10;            scannedTexts = scannedTexts,&#10;            onTextSelected = { selectedTitle, selectedAmount, selectedVendor -&gt;&#10;                if (selectedTitle.isNotEmpty()) title = selectedTitle&#10;                if (selectedAmount.isNotEmpty()) {&#10;                    val extractedAmount = RupiahFormatter.extractNumberFromRupiahText(selectedAmount)&#10;                    amountValue = extractedAmount&#10;                    amountDisplay = RupiahFormatter.formatRupiahDisplay(extractedAmount)&#10;                }&#10;                if (selectedVendor.isNotEmpty()) vendor = selectedVendor&#10;                showTextSelectionDialog = false&#10;            },&#10;            onDismiss = { showTextSelectionDialog = false }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun TextSelectionDialog(&#10;    scannedTexts: List&lt;String&gt;,&#10;    onTextSelected: (title: String, amount: String, vendor: String) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    var selectedTitle by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedAmount by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedVendor by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = { Text(&quot;Select Scanned Text&quot;) },&#10;        text = {&#10;            Column {&#10;                Text(&quot;Tap on text to assign to fields:&quot;, style = MaterialTheme.typography.bodyMedium)&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                // Show current selections&#10;                Card(modifier = Modifier.fillMaxWidth()) {&#10;                    Column(modifier = Modifier.padding(8.dp)) {&#10;                        Text(&quot;Selected:&quot;, style = MaterialTheme.typography.labelMedium)&#10;                        Text(&quot;Title: ${selectedTitle.ifEmpty { &quot;None&quot; }}&quot;, style = MaterialTheme.typography.bodySmall)&#10;                        Text(&quot;Amount: ${selectedAmount.ifEmpty { &quot;None&quot; }}&quot;, style = MaterialTheme.typography.bodySmall)&#10;                        Text(&quot;Vendor: ${selectedVendor.ifEmpty { &quot;None&quot; }}&quot;, style = MaterialTheme.typography.bodySmall)&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                LazyColumn(modifier = Modifier.height(200.dp)) {&#10;                    itemsIndexed(scannedTexts) { index, text -&gt;&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 2.dp),&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = when (text) {&#10;                                    selectedTitle -&gt; MaterialTheme.colorScheme.primaryContainer&#10;                                    selectedAmount -&gt; MaterialTheme.colorScheme.secondaryContainer&#10;                                    selectedVendor -&gt; MaterialTheme.colorScheme.tertiaryContainer&#10;                                    else -&gt; MaterialTheme.colorScheme.surface&#10;                                }&#10;                            )&#10;                        ) {&#10;                            Column(modifier = Modifier.padding(8.dp)) {&#10;                                Text(text, style = MaterialTheme.typography.bodyMedium)&#10;&#10;                                Row(&#10;                                    modifier = Modifier.fillMaxWidth(),&#10;                                    horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;                                ) {&#10;                                    Button(&#10;                                        onClick = { selectedTitle = text },&#10;                                        modifier = Modifier.weight(1f),&#10;                                        colors = ButtonDefaults.buttonColors(&#10;                                            containerColor = if (selectedTitle == text)&#10;                                                MaterialTheme.colorScheme.primary&#10;                                            else MaterialTheme.colorScheme.outline&#10;                                        )&#10;                                    ) {&#10;                                        Text(&quot;Title&quot;, style = MaterialTheme.typography.labelSmall)&#10;                                    }&#10;&#10;                                    Button(&#10;                                        onClick = { selectedAmount = text },&#10;                                        modifier = Modifier.weight(1f),&#10;                                        colors = ButtonDefaults.buttonColors(&#10;                                            containerColor = if (selectedAmount == text)&#10;                                                MaterialTheme.colorScheme.secondary&#10;                                            else MaterialTheme.colorScheme.outline&#10;                                        )&#10;                                    ) {&#10;                                        Text(&quot;Amount&quot;, style = MaterialTheme.typography.labelSmall)&#10;                                    }&#10;&#10;                                    Button(&#10;                                        onClick = { selectedVendor = text },&#10;                                        modifier = Modifier.weight(1f),&#10;                                        colors = ButtonDefaults.buttonColors(&#10;                                            containerColor = if (selectedVendor == text)&#10;                                                MaterialTheme.colorScheme.tertiary&#10;                                            else MaterialTheme.colorScheme.outline&#10;                                        )&#10;                                    ) {&#10;                                        Text(&quot;Vendor&quot;, style = MaterialTheme.typography.labelSmall)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        },&#10;        confirmButton = {&#10;            Button(&#10;                onClick = {&#10;                    onTextSelected(selectedTitle, selectedAmount, selectedVendor)&#10;                }&#10;            ) {&#10;                Text(&quot;Apply&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.adilstudio.project.onevault.presentation.bill&#10;&#10;import android.Manifest&#10;import android.net.Uri&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.itemsIndexed&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.AttachFile&#10;import androidx.compose.material.icons.filled.CalendarToday&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.DatePicker&#10;import androidx.compose.material3.DatePickerDialog&#10;import androidx.compose.material3.DropdownMenuItem&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.ExposedDropdownMenuBox&#10;import androidx.compose.material3.ExposedDropdownMenuDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.material3.rememberDatePickerState&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.asImageBitmap&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import androidx.core.content.FileProvider&#10;import coil.compose.AsyncImage&#10;import com.adilstudio.project.onevault.core.util.DateUtil&#10;import com.adilstudio.project.onevault.core.util.ImageUtil&#10;import com.adilstudio.project.onevault.core.util.PermissionUtil&#10;import com.adilstudio.project.onevault.core.util.RupiahFormatter&#10;import com.adilstudio.project.onevault.domain.model.Bill&#10;import com.adilstudio.project.onevault.domain.model.BillCategory&#10;import com.adilstudio.project.onevault.presentation.bill.category.BillCategoryViewModel&#10;import com.google.mlkit.vision.common.InputImage&#10;import com.google.mlkit.vision.text.TextRecognition&#10;import com.google.mlkit.vision.text.latin.TextRecognizerOptions&#10;import org.koin.androidx.compose.koinViewModel&#10;import java.io.File&#10;import java.time.Instant&#10;import java.time.LocalDate&#10;import java.time.ZoneId&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun AddBillScreen(&#10;    viewModel: BillTrackerViewModel = koinViewModel(),&#10;    categoryViewModel: BillCategoryViewModel = koinViewModel(),&#10;    onBillAdded: () -&gt; Unit = {}&#10;) {&#10;    val context = LocalContext.current&#10;    val categories by categoryViewModel.categories.collectAsState()&#10;&#10;    var title by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedCategory by remember { mutableStateOf&lt;BillCategory?&gt;(null) }&#10;    var showCategoryDropdown by remember { mutableStateOf(false) }&#10;    var amountValue by remember { mutableStateOf(0L) } // Store as Long&#10;    var amountDisplay by remember { mutableStateOf(&quot;&quot;) } // Display formatted&#10;    var vendor by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    // Date picker state&#10;    var selectedDate by remember { mutableStateOf(LocalDate.now()) }&#10;    var showDatePicker by remember { mutableStateOf(false) }&#10;    val datePickerState = rememberDatePickerState(&#10;        initialSelectedDateMillis = System.currentTimeMillis()&#10;    )&#10;&#10;    // Image handling state&#10;    var selectedImageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;    var savedImagePath by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    // MLKit scanning state&#10;    var scannedTexts by remember { mutableStateOf&lt;List&lt;String&gt;&gt;(emptyList()) }&#10;    var showTextSelectionDialog by remember { mutableStateOf(false) }&#10;    var cameraImageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;    var isScanning by remember { mutableStateOf(false) }&#10;&#10;    // Permission state&#10;    var showPermissionDialog by remember { mutableStateOf(false) }&#10;    var hasCameraPermission by remember {&#10;        mutableStateOf(PermissionUtil.isCameraPermissionGranted(context))&#10;    }&#10;&#10;    // Image picker launcher&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        uri?.let {&#10;            selectedImageUri = it&#10;            // Save image to internal storage&#10;            val imagePath = ImageUtil.saveImageToInternalStorage(context, it)&#10;            savedImagePath = imagePath&#10;        }&#10;    }&#10;&#10;    // Camera launcher&#10;    val cameraLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.TakePicture()&#10;    ) { success -&gt;&#10;        if (success &amp;&amp; cameraImageUri != null) {&#10;            isScanning = true&#10;            val image = InputImage.fromFilePath(context, cameraImageUri!!)&#10;            val recognizer = TextRecognition.getClient(TextRecognizerOptions.DEFAULT_OPTIONS)&#10;&#10;            recognizer.process(image)&#10;                .addOnSuccessListener { visionText -&gt;&#10;                    val texts = visionText.textBlocks&#10;                        .flatMap { it.lines }&#10;                        .map { it.text.trim() }&#10;                        .filter { it.isNotEmpty() }&#10;&#10;                    scannedTexts = texts&#10;                    isScanning = false&#10;&#10;                    if (texts.isNotEmpty()) {&#10;                        showTextSelectionDialog = true&#10;                    }&#10;                }&#10;                .addOnFailureListener {&#10;                    isScanning = false&#10;                    // Handle error if needed&#10;                }&#10;        }&#10;    }&#10;&#10;    // Function to launch camera&#10;    fun launchCamera() {&#10;        val imageFile = File(context.cacheDir, &quot;camera_image_${System.currentTimeMillis()}.jpg&quot;)&#10;        cameraImageUri = FileProvider.getUriForFile(&#10;            context,&#10;            &quot;${context.packageName}.fileprovider&quot;,&#10;            imageFile&#10;        )&#10;        cameraImageUri?.let { uri -&gt;&#10;            cameraLauncher.launch(uri)&#10;        }&#10;    }&#10;&#10;    // Permission launcher&#10;    val permissionLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.RequestPermission()&#10;    ) { isGranted -&gt;&#10;        hasCameraPermission = isGranted&#10;        if (isGranted) {&#10;            // Permission granted, proceed with camera&#10;            launchCamera()&#10;        } else {&#10;            // Permission denied, show explanation&#10;            showPermissionDialog = true&#10;        }&#10;    }&#10;&#10;    // Function to handle scan button click&#10;    fun handleScanButtonClick() {&#10;        if (hasCameraPermission) {&#10;            launchCamera()&#10;        } else {&#10;            permissionLauncher.launch(Manifest.permission.CAMERA)&#10;        }&#10;    }&#10;&#10;    Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {&#10;        Text(&quot;Add Bill&quot;, style = MaterialTheme.typography.headlineMedium)&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        OutlinedTextField(&#10;            value = title,&#10;            onValueChange = { title = it },&#10;            label = { Text(&quot;Title&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Category selection&#10;        ExposedDropdownMenuBox(&#10;            expanded = showCategoryDropdown,&#10;            onExpandedChange = { showCategoryDropdown = !showCategoryDropdown }&#10;        ) {&#10;            OutlinedTextField(&#10;                value = selectedCategory?.name ?: &quot;&quot;,&#10;                onValueChange = {},&#10;                label = { Text(&quot;Category (Optional)&quot;) },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .menuAnchor(),&#10;                readOnly = true,&#10;                trailingIcon = {&#10;                    ExposedDropdownMenuDefaults.TrailingIcon(expanded = showCategoryDropdown)&#10;                },&#10;                placeholder = { Text(&quot;No category selected&quot;) }&#10;            )&#10;&#10;            ExposedDropdownMenu(&#10;                expanded = showCategoryDropdown,&#10;                onDismissRequest = { showCategoryDropdown = false }&#10;            ) {&#10;                // Add option to clear selection&#10;                DropdownMenuItem(&#10;                    text = {&#10;                        Text(&#10;                            &quot;No Category&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    },&#10;                    onClick = {&#10;                        selectedCategory = null&#10;                        showCategoryDropdown = false&#10;                    }&#10;                )&#10;&#10;                categories.forEach { category -&gt;&#10;                    DropdownMenuItem(&#10;                        text = {&#10;                            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                                Text(&#10;                                    text = category.icon,&#10;                                    modifier = Modifier.padding(end = 8.dp)&#10;                                )&#10;                                Text(category.name)&#10;                            }&#10;                        },&#10;                        onClick = {&#10;                            selectedCategory = category&#10;                            showCategoryDropdown = false&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        OutlinedTextField(&#10;            value = amountDisplay,&#10;            onValueChange = { newValue -&gt;&#10;                // Only allow digits and format as Indonesian Rupiah&#10;                val digitsOnly = newValue.replace(Regex(&quot;[^0-9]&quot;), &quot;&quot;)&#10;                if (digitsOnly.length &lt;= 15) { // Reasonable limit for amount&#10;                    val longValue = digitsOnly.toLongOrNull() ?: 0L&#10;                    amountValue = longValue&#10;                    amountDisplay = RupiahFormatter.formatRupiahDisplay(longValue)&#10;                }&#10;            },&#10;            label = { Text(&quot;Amount&quot;) },&#10;            leadingIcon = {&#10;                Text(&#10;                    text = &quot;Rp&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            },&#10;            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),&#10;            modifier = Modifier.fillMaxWidth(),&#10;            placeholder = { Text(&quot;0&quot;) }&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        OutlinedTextField(&#10;            value = vendor,&#10;            onValueChange = { vendor = it },&#10;            label = { Text(&quot;Vendor&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Date picker field&#10;        OutlinedTextField(&#10;            value = DateUtil.formatDateForDisplay(selectedDate),&#10;            onValueChange = { },&#10;            label = { Text(&quot;Bill Date&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            readOnly = true,&#10;            trailingIcon = {&#10;                IconButton(onClick = { showDatePicker = true }) {&#10;                    Icon(Icons.Default.CalendarToday, contentDescription = &quot;Select Date&quot;)&#10;                }&#10;            }&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Image upload section&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;            )&#10;        ) {&#10;            Column(modifier = Modifier.padding(16.dp)) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&quot;Attachment (Optional)&quot;, style = MaterialTheme.typography.labelLarge)&#10;&#10;                    if (selectedImageUri != null || savedImagePath != null) {&#10;                        IconButton(&#10;                            onClick = {&#10;                                selectedImageUri = null&#10;                                savedImagePath?.let { ImageUtil.deleteImageFromInternalStorage(it) }&#10;                                savedImagePath = null&#10;                            }&#10;                        ) {&#10;                            Icon(Icons.Default.Delete, contentDescription = &quot;Remove Image&quot;)&#10;                        }&#10;                    }&#10;                }&#10;&#10;                if (selectedImageUri != null) {&#10;                    // Show selected image&#10;                    AsyncImage(&#10;                        model = selectedImageUri,&#10;                        contentDescription = &quot;Selected Image&quot;,&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(200.dp)&#10;                            .clip(RoundedCornerShape(8.dp)),&#10;                        contentScale = ContentScale.Crop&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                }&#10;&#10;                OutlinedButton(&#10;                    onClick = { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Icon(Icons.Default.AttachFile, contentDescription = null)&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;Choose Image&quot;)&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Scan Bill Button&#10;        Button(&#10;            onClick = { handleScanButtonClick() },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            enabled = !isScanning&#10;        ) {&#10;            if (isScanning) {&#10;                CircularProgressIndicator(modifier = Modifier.size(16.dp))&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Scanning...&quot;)&#10;            } else {&#10;                Text(&quot;Scan Bill&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Save Bill Button&#10;        Button(&#10;            onClick = {&#10;                val bill = Bill(&#10;                    id = System.currentTimeMillis(),&#10;                    title = title,&#10;                    category = selectedCategory?.name, // Pass null if no category selected&#10;                    amount = amountValue.toDouble(),&#10;                    vendor = vendor,&#10;                    billDate = DateUtil.localDateToIsoString(selectedDate),&#10;                    imagePath = savedImagePath&#10;                )&#10;                viewModel.addBill(bill)&#10;                onBillAdded()&#10;            },&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Save Bill&quot;)&#10;        }&#10;    }&#10;&#10;    // Date Picker Dialog&#10;    if (showDatePicker) {&#10;        DatePickerDialog(&#10;            onDismissRequest = { showDatePicker = false },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        datePickerState.selectedDateMillis?.let { millis -&gt;&#10;                            selectedDate = Instant.ofEpochMilli(millis)&#10;                                .atZone(ZoneId.systemDefault())&#10;                                .toLocalDate()&#10;                        }&#10;                        showDatePicker = false&#10;                    }&#10;                ) {&#10;                    Text(&quot;OK&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showDatePicker = false }) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        ) {&#10;            DatePicker(state = datePickerState)&#10;        }&#10;    }&#10;&#10;    // Permission explanation dialog&#10;    if (showPermissionDialog) {&#10;        AlertDialog(&#10;            onDismissRequest = { showPermissionDialog = false },&#10;            title = { Text(&quot;Camera Permission Required&quot;) },&#10;            text = {&#10;                Text(&quot;This app needs camera permission to scan bills and extract text information. Please grant camera permission to use this feature.&quot;)&#10;            },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        showPermissionDialog = false&#10;                        permissionLauncher.launch(Manifest.permission.CAMERA)&#10;                    }&#10;                ) {&#10;                    Text(&quot;Grant Permission&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showPermissionDialog = false }) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;&#10;    // Text Selection Dialog&#10;    if (showTextSelectionDialog) {&#10;        TextSelectionDialog(&#10;            scannedTexts = scannedTexts,&#10;            onTextSelected = { selectedTitle, selectedAmount, selectedVendor -&gt;&#10;                if (selectedTitle.isNotEmpty()) title = selectedTitle&#10;                if (selectedAmount.isNotEmpty()) {&#10;                    val extractedAmount = RupiahFormatter.extractNumberFromRupiahText(selectedAmount)&#10;                    amountValue = extractedAmount&#10;                    amountDisplay = RupiahFormatter.formatRupiahDisplay(extractedAmount)&#10;                }&#10;                if (selectedVendor.isNotEmpty()) vendor = selectedVendor&#10;                showTextSelectionDialog = false&#10;            },&#10;            onDismiss = { showTextSelectionDialog = false }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun TextSelectionDialog(&#10;    scannedTexts: List&lt;String&gt;,&#10;    onTextSelected: (title: String, amount: String, vendor: String) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    var selectedTitle by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedAmount by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedVendor by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = { Text(&quot;Select Scanned Text&quot;) },&#10;        text = {&#10;            Column {&#10;                Text(&quot;Tap on text to assign to fields:&quot;, style = MaterialTheme.typography.bodyMedium)&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                // Show current selections&#10;                Card(modifier = Modifier.fillMaxWidth()) {&#10;                    Column(modifier = Modifier.padding(8.dp)) {&#10;                        Text(&quot;Selected:&quot;, style = MaterialTheme.typography.labelMedium)&#10;                        Text(&quot;Title: ${selectedTitle.ifEmpty { &quot;None&quot; }}&quot;, style = MaterialTheme.typography.bodySmall)&#10;                        Text(&quot;Amount: ${selectedAmount.ifEmpty { &quot;None&quot; }}&quot;, style = MaterialTheme.typography.bodySmall)&#10;                        Text(&quot;Vendor: ${selectedVendor.ifEmpty { &quot;None&quot; }}&quot;, style = MaterialTheme.typography.bodySmall)&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                LazyColumn(modifier = Modifier.height(200.dp)) {&#10;                    itemsIndexed(scannedTexts) { index, text -&gt;&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 2.dp),&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = when (text) {&#10;                                    selectedTitle -&gt; MaterialTheme.colorScheme.primaryContainer&#10;                                    selectedAmount -&gt; MaterialTheme.colorScheme.secondaryContainer&#10;                                    selectedVendor -&gt; MaterialTheme.colorScheme.tertiaryContainer&#10;                                    else -&gt; MaterialTheme.colorScheme.surface&#10;                                }&#10;                            )&#10;                        ) {&#10;                            Column(modifier = Modifier.padding(8.dp)) {&#10;                                Text(text, style = MaterialTheme.typography.bodyMedium)&#10;&#10;                                Row(&#10;                                    modifier = Modifier.fillMaxWidth(),&#10;                                    horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;                                ) {&#10;                                    Button(&#10;                                        onClick = { selectedTitle = text },&#10;                                        modifier = Modifier.weight(1f),&#10;                                        colors = ButtonDefaults.buttonColors(&#10;                                            containerColor = if (selectedTitle == text)&#10;                                                MaterialTheme.colorScheme.primary&#10;                                            else MaterialTheme.colorScheme.outline&#10;                                        )&#10;                                    ) {&#10;                                        Text(&quot;Title&quot;, style = MaterialTheme.typography.labelSmall)&#10;                                    }&#10;&#10;                                    Button(&#10;                                        onClick = { selectedAmount = text },&#10;                                        modifier = Modifier.weight(1f),&#10;                                        colors = ButtonDefaults.buttonColors(&#10;                                            containerColor = if (selectedAmount == text)&#10;                                                MaterialTheme.colorScheme.secondary&#10;                                            else MaterialTheme.colorScheme.outline&#10;                                        )&#10;                                    ) {&#10;                                        Text(&quot;Amount&quot;, style = MaterialTheme.typography.labelSmall)&#10;                                    }&#10;&#10;                                    Button(&#10;                                        onClick = { selectedVendor = text },&#10;                                        modifier = Modifier.weight(1f),&#10;                                        colors = ButtonDefaults.buttonColors(&#10;                                            containerColor = if (selectedVendor == text)&#10;                                                MaterialTheme.colorScheme.tertiary&#10;                                            else MaterialTheme.colorScheme.outline&#10;                                        )&#10;                                    ) {&#10;                                        Text(&quot;Vendor&quot;, style = MaterialTheme.typography.labelSmall)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        },&#10;        confirmButton = {&#10;            Button(&#10;                onClick = {&#10;                    onTextSelected(selectedTitle, selectedAmount, selectedVendor)&#10;                }&#10;            ) {&#10;                Text(&quot;Apply&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/adilstudio/project/onevault/presentation/bill/BillListScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/adilstudio/project/onevault/presentation/bill/BillListScreen.kt" />
              <option name="originalContent" value="package com.adilstudio.project.onevault.presentation.bill&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.AttachFile&#10;import androidx.compose.material.icons.filled.Category&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import com.adilstudio.project.onevault.core.util.DateUtil&#10;import com.adilstudio.project.onevault.core.util.RupiahFormatter&#10;import org.koin.androidx.compose.koinViewModel&#10;&#10;@Composable&#10;fun BillListScreen(&#10;    viewModel: BillTrackerViewModel = koinViewModel(),&#10;    onAddBill: () -&gt; Unit = {},&#10;    onManageCategories: () -&gt; Unit = {}&#10;) {&#10;    val bills = viewModel.bills.collectAsState().value&#10;    Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {&#10;        // Header with Categories button&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&quot;Bills&quot;, style = MaterialTheme.typography.headlineMedium)&#10;            OutlinedButton(&#10;                onClick = onManageCategories,&#10;                modifier = Modifier.height(40.dp)&#10;            ) {&#10;                Icon(&#10;                    Icons.Default.Category,&#10;                    contentDescription = &quot;Manage Categories&quot;,&#10;                    modifier = Modifier.size(18.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(&quot;Categories&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;        LazyColumn(modifier = Modifier.weight(1f)) {&#10;            items(bills.size) { idx -&gt;&#10;                val bill = bills[idx]&#10;                Card(modifier = Modifier.fillMaxWidth().padding(vertical = 4.dp)) {&#10;                    Column(modifier = Modifier.padding(16.dp)) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            horizontalArrangement = Arrangement.SpaceBetween,&#10;                            verticalAlignment = Alignment.Top&#10;                        ) {&#10;                            Column(modifier = Modifier.weight(1f)) {&#10;                                Text(bill.title, style = MaterialTheme.typography.titleMedium)&#10;                                Text(&quot;${RupiahFormatter.formatWithRupiahPrefix(bill.amount.toLong())} - ${bill.vendor}&quot;)&#10;&#10;                                // Display formatted date&#10;                                val formattedDate = DateUtil.isoStringToLocalDate(bill.billDate)?.let { date -&gt;&#10;                                    DateUtil.formatDateForDisplay(date)&#10;                                } ?: bill.billDate&#10;                                Text(&#10;                                    &quot;Date: $formattedDate&quot;,&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;&#10;                                if (bill.category.isNotEmpty()) {&#10;                                    Text(&#10;                                        &quot;Category: ${bill.category}&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall,&#10;                                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;                            // Show attachment icon if image exists&#10;                            if (!bill.imagePath.isNullOrEmpty()) {&#10;                                Icon(&#10;                                    Icons.Default.AttachFile,&#10;                                    contentDescription = &quot;Has Attachment&quot;,&#10;                                    modifier = Modifier.size(16.dp),&#10;                                    tint = MaterialTheme.colorScheme.primary&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        Button(onClick = onAddBill, modifier = Modifier.fillMaxWidth()) {&#10;            Text(&quot;Add Bill&quot;)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.adilstudio.project.onevault.presentation.bill&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.AttachFile&#10;import androidx.compose.material.icons.filled.Category&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import com.adilstudio.project.onevault.core.util.DateUtil&#10;import com.adilstudio.project.onevault.core.util.RupiahFormatter&#10;import org.koin.androidx.compose.koinViewModel&#10;&#10;@Composable&#10;fun BillListScreen(&#10;    viewModel: BillTrackerViewModel = koinViewModel(),&#10;    onAddBill: () -&gt; Unit = {},&#10;    onManageCategories: () -&gt; Unit = {}&#10;) {&#10;    val bills = viewModel.bills.collectAsState().value&#10;    Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {&#10;        // Header with Categories button&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&quot;Bills&quot;, style = MaterialTheme.typography.headlineMedium)&#10;            OutlinedButton(&#10;                onClick = onManageCategories,&#10;                modifier = Modifier.height(40.dp)&#10;            ) {&#10;                Icon(&#10;                    Icons.Default.Category,&#10;                    contentDescription = &quot;Manage Categories&quot;,&#10;                    modifier = Modifier.size(18.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(&quot;Categories&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;        LazyColumn(modifier = Modifier.weight(1f)) {&#10;            items(bills.size) { idx -&gt;&#10;                val bill = bills[idx]&#10;                Card(modifier = Modifier.fillMaxWidth().padding(vertical = 4.dp)) {&#10;                    Column(modifier = Modifier.padding(16.dp)) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            horizontalArrangement = Arrangement.SpaceBetween,&#10;                            verticalAlignment = Alignment.Top&#10;                        ) {&#10;                            Column(modifier = Modifier.weight(1f)) {&#10;                                Text(bill.title, style = MaterialTheme.typography.titleMedium)&#10;                                Text(&quot;${RupiahFormatter.formatWithRupiahPrefix(bill.amount.toLong())} - ${bill.vendor}&quot;)&#10;&#10;                                // Display formatted date&#10;                                val formattedDate = DateUtil.isoStringToLocalDate(bill.billDate)?.let { date -&gt;&#10;                                    DateUtil.formatDateForDisplay(date)&#10;                                } ?: bill.billDate&#10;                                Text(&#10;                                    &quot;Date: $formattedDate&quot;,&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;&#10;                                // Display category or &quot;No Category&quot; if null&#10;                                Text(&#10;                                    &quot;Category: ${bill.category ?: &quot;No Category&quot;}&quot;,&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                            }&#10;&#10;                            // Show attachment icon if image exists&#10;                            if (!bill.imagePath.isNullOrEmpty()) {&#10;                                Icon(&#10;                                    Icons.Default.AttachFile,&#10;                                    contentDescription = &quot;Has Attachment&quot;,&#10;                                    modifier = Modifier.size(16.dp),&#10;                                    tint = MaterialTheme.colorScheme.primary&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        Button(onClick = onAddBill, modifier = Modifier.fillMaxWidth()) {&#10;            Text(&quot;Add Bill&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/sqldelight/com/adilstudio/project/onevault/BillEntity.sq">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/sqldelight/com/adilstudio/project/onevault/BillEntity.sq" />
              <option name="originalContent" value="CREATE TABLE BillEntity (&#10;    id INTEGER NOT NULL PRIMARY KEY,&#10;    title TEXT NOT NULL,&#10;    category TEXT NOT NULL,&#10;    amount REAL NOT NULL,&#10;    vendor TEXT NOT NULL,&#10;    billDate TEXT NOT NULL,&#10;    imagePath TEXT&#10;);&#10;&#10;selectAll:&#10;SELECT * FROM BillEntity;&#10;&#10;selectById:&#10;SELECT * FROM BillEntity WHERE id = ?;&#10;&#10;insertBill:&#10;INSERT INTO BillEntity(id, title, category, amount, vendor, billDate, imagePath)&#10;VALUES (?, ?, ?, ?, ?, ?, ?);&#10;&#10;updateBill:&#10;UPDATE BillEntity SET title = ?, category = ?, amount = ?, vendor = ?, billDate = ?, imagePath = ? WHERE id = ?;&#10;&#10;deleteBill:&#10;DELETE FROM BillEntity WHERE id = ?;&#10;" />
              <option name="updatedContent" value="CREATE TABLE BillEntity (&#10;    id INTEGER NOT NULL PRIMARY KEY,&#10;    title TEXT NOT NULL,&#10;    category TEXT,&#10;    amount REAL NOT NULL,&#10;    vendor TEXT NOT NULL,&#10;    billDate TEXT NOT NULL,&#10;    imagePath TEXT&#10;);&#10;&#10;selectAll:&#10;SELECT * FROM BillEntity;&#10;&#10;selectById:&#10;SELECT * FROM BillEntity WHERE id = ?;&#10;&#10;insertBill:&#10;INSERT INTO BillEntity(id, title, category, amount, vendor, billDate, imagePath)&#10;VALUES (?, ?, ?, ?, ?, ?, ?);&#10;&#10;updateBill:&#10;UPDATE BillEntity SET title = ?, category = ?, amount = ?, vendor = ?, billDate = ?, imagePath = ? WHERE id = ?;&#10;&#10;deleteBill:&#10;DELETE FROM BillEntity WHERE id = ?;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/libs.versions.toml" />
              <option name="originalContent" value="[versions]&#10;agp = &quot;8.11.1&quot;&#10;kotlin = &quot;2.0.21&quot;&#10;coreKtx = &quot;1.16.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.2.1&quot;&#10;espressoCore = &quot;3.6.1&quot;&#10;lifecycleRuntimeKtx = &quot;2.9.1&quot;&#10;activityCompose = &quot;1.10.1&quot;&#10;composeBom = &quot;2024.09.00&quot;&#10;koin = &quot;4.1.0&quot;&#10;coroutines = &quot;1.8.1&quot;&#10;sqldelight = &quot;2.0.1&quot;&#10;ktor = &quot;2.3.10&quot;&#10;serialization = &quot;1.6.3&quot;&#10;googleMlKit = &quot;19.0.0&quot;&#10;# Additional versions for consistency&#10;lifecycleViewmodelCompose = &quot;2.7.0&quot;&#10;navigationCompose = &quot;2.7.7&quot;&#10;composeUi = &quot;1.6.7&quot;&#10;material3 = &quot;1.2.1&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-lifecycle-viewmodel-compose = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-viewmodel-compose&quot;, version.ref = &quot;lifecycleViewmodelCompose&quot; }&#10;androidx-navigation-compose = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-compose&quot;, version.ref = &quot;navigationCompose&quot; }&#10;androidx-compose-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot;, version.ref = &quot;composeUi&quot; }&#10;androidx-compose-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot;, version.ref = &quot;composeUi&quot; }&#10;androidx-compose-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot;, version.ref = &quot;composeUi&quot; }&#10;androidx-compose-icons-extended = { group = &quot;androidx.compose.material&quot;, name = &quot;material-icons-extended&quot;, version.ref = &quot;composeUi&quot; }&#10;&#10;androidx-compose-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot;, version.ref = &quot;material3&quot; }&#10;koin-android = { group = &quot;io.insert-koin&quot;, name = &quot;koin-android&quot;, version.ref = &quot;koin&quot; }&#10;koin-androidx-compose = { group = &quot;io.insert-koin&quot;, name = &quot;koin-androidx-compose&quot;, version.ref = &quot;koin&quot; }&#10;coroutines-android = { group = &quot;org.jetbrains.kotlinx&quot;, name = &quot;kotlinx-coroutines-android&quot;, version.ref = &quot;coroutines&quot; }&#10;sqldelight-android-driver = { group = &quot;app.cash.sqldelight&quot;, name = &quot;android-driver&quot;, version.ref = &quot;sqldelight&quot; }&#10;sqldelight-coroutines-extensions = { group = &quot;app.cash.sqldelight&quot;, name = &quot;coroutines-extensions&quot;, version.ref = &quot;sqldelight&quot; }&#10;ktor-client-android = { group = &quot;io.ktor&quot;, name = &quot;ktor-client-android&quot;, version.ref = &quot;ktor&quot; }&#10;ktor-client-content-negotiation = { group = &quot;io.ktor&quot;, name = &quot;ktor-client-content-negotiation&quot;, version.ref = &quot;ktor&quot; }&#10;ktor-serialization-kotlinx-json = { group = &quot;io.ktor&quot;, name = &quot;ktor-serialization-kotlinx-json&quot;, version.ref = &quot;ktor&quot; }&#10;kotlinx-serialization-json = { group = &quot;org.jetbrains.kotlinx&quot;, name = &quot;kotlinx-serialization-json&quot;, version.ref = &quot;serialization&quot; }&#10;google-mlkit-text-recognition = { group = &quot;com.google.android.gms&quot;, name = &quot;play-services-mlkit-text-recognition&quot;, version.ref = &quot;googleMlKit&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }&#10;" />
              <option name="updatedContent" value="[versions]&#10;agp = &quot;8.11.1&quot;&#10;kotlin = &quot;2.0.21&quot;&#10;coreKtx = &quot;1.16.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.2.1&quot;&#10;espressoCore = &quot;3.6.1&quot;&#10;lifecycleRuntimeKtx = &quot;2.9.1&quot;&#10;activityCompose = &quot;1.10.1&quot;&#10;composeBom = &quot;2024.09.00&quot;&#10;koin = &quot;4.1.0&quot;&#10;coroutines = &quot;1.8.1&quot;&#10;sqldelight = &quot;2.0.1&quot;&#10;ktor = &quot;2.3.10&quot;&#10;serialization = &quot;1.6.3&quot;&#10;googleMlKit = &quot;19.0.0&quot;&#10;coil = &quot;2.6.0&quot;&#10;# Additional versions for consistency&#10;lifecycleViewmodelCompose = &quot;2.7.0&quot;&#10;navigationCompose = &quot;2.7.7&quot;&#10;composeUi = &quot;1.6.7&quot;&#10;material3 = &quot;1.2.1&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-lifecycle-viewmodel-compose = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-viewmodel-compose&quot;, version.ref = &quot;lifecycleViewmodelCompose&quot; }&#10;androidx-navigation-compose = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-compose&quot;, version.ref = &quot;navigationCompose&quot; }&#10;androidx-compose-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot;, version.ref = &quot;composeUi&quot; }&#10;androidx-compose-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot;, version.ref = &quot;composeUi&quot; }&#10;androidx-compose-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot;, version.ref = &quot;composeUi&quot; }&#10;androidx-compose-icons-extended = { group = &quot;androidx.compose.material&quot;, name = &quot;material-icons-extended&quot;, version.ref = &quot;composeUi&quot; }&#10;&#10;androidx-compose-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot;, version.ref = &quot;material3&quot; }&#10;koin-android = { group = &quot;io.insert-koin&quot;, name = &quot;koin-android&quot;, version.ref = &quot;koin&quot; }&#10;koin-androidx-compose = { group = &quot;io.insert-koin&quot;, name = &quot;koin-androidx-compose&quot;, version.ref = &quot;koin&quot; }&#10;coroutines-android = { group = &quot;org.jetbrains.kotlinx&quot;, name = &quot;kotlinx-coroutines-android&quot;, version.ref = &quot;coroutines&quot; }&#10;sqldelight-android-driver = { group = &quot;app.cash.sqldelight&quot;, name = &quot;android-driver&quot;, version.ref = &quot;sqldelight&quot; }&#10;sqldelight-coroutines-extensions = { group = &quot;app.cash.sqldelight&quot;, name = &quot;coroutines-extensions&quot;, version.ref = &quot;sqldelight&quot; }&#10;ktor-client-android = { group = &quot;io.ktor&quot;, name = &quot;ktor-client-android&quot;, version.ref = &quot;ktor&quot; }&#10;ktor-client-content-negotiation = { group = &quot;io.ktor&quot;, name = &quot;ktor-client-content-negotiation&quot;, version.ref = &quot;ktor&quot; }&#10;ktor-serialization-kotlinx-json = { group = &quot;io.ktor&quot;, name = &quot;ktor-serialization-kotlinx-json&quot;, version.ref = &quot;ktor&quot; }&#10;kotlinx-serialization-json = { group = &quot;org.jetbrains.kotlinx&quot;, name = &quot;kotlinx-serialization-json&quot;, version.ref = &quot;serialization&quot; }&#10;google-mlkit-text-recognition = { group = &quot;com.google.android.gms&quot;, name = &quot;play-services-mlkit-text-recognition&quot;, version.ref = &quot;googleMlKit&quot; }&#10;coil = { group = &quot;io.coil-kt&quot;, name = &quot;coil&quot;, version.ref = &quot;coil&quot; }&#10;coil-compose = { group = &quot;io.coil-kt&quot;, name = &quot;coil-compose&quot;, version.ref = &quot;coil&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>