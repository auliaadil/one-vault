<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/adilstudio/project/onevault/domain/model/Bill.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/adilstudio/project/onevault/domain/model/Bill.kt" />
              <option name="originalContent" value="package com.adilstudio.project.onevault.domain.model&#10;&#10;import kotlinx.serialization.Serializable&#10;import java.time.LocalDate&#10;&#10;@Serializable&#10;data class Bill(&#10;    val id: Long,&#10;    val title: String,&#10;    val category: String,&#10;    val amount: Double,&#10;    val vendor: String,&#10;    val billDate: String, // Store as ISO date string (YYYY-MM-DD)&#10;    val imagePath: String? = null // Optional image path&#10;)&#10;" />
              <option name="updatedContent" value="package com.adilstudio.project.onevault.domain.model&#10;&#10;import kotlinx.serialization.Serializable&#10;import java.time.LocalDate&#10;&#10;@Serializable&#10;data class Bill(&#10;    val id: Long,&#10;    val title: String,&#10;    val category: String? = null, // Optional category&#10;    val amount: Double,&#10;    val vendor: String,&#10;    val billDate: String, // Store as ISO date string (YYYY-MM-DD)&#10;    val imagePath: String? = null // Optional image path&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/adilstudio/project/onevault/service/OneVaultAutofillService.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/adilstudio/project/onevault/service/OneVaultAutofillService.kt" />
              <option name="originalContent" value="package com.adilstudio.project.onevault.service&#10;&#10;import android.app.assist.AssistStructure&#10;import android.service.autofill.AutofillService&#10;import android.service.autofill.FillCallback&#10;import android.service.autofill.FillRequest&#10;import android.service.autofill.FillResponse&#10;import android.view.autofill.AutofillId&#10;import android.widget.RemoteViews&#10;import android.content.Intent&#10;import android.app.PendingIntent&#10;import android.os.CancellationSignal&#10;import com.adilstudio.project.onevault.presentation.credential.CredentialListScreen&#10;import com.adilstudio.project.onevault.domain.model.Credential&#10;import com.adilstudio.project.onevault.domain.repository.CredentialRepository&#10;import android.service.autofill.Dataset&#10;import android.view.autofill.AutofillValue&#10;import android.content.Context&#10;import android.text.TextUtils&#10;import com.adilstudio.project.onevault.data.security.SecurityManager&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.SupervisorJob&#10;import kotlinx.coroutines.flow.first&#10;import kotlinx.coroutines.launch&#10;import org.koin.android.ext.android.inject&#10;&#10;class OneVaultAutofillService : AutofillService() {&#10;    private val credentialRepository: CredentialRepository by inject()&#10;    private val securityManager: SecurityManager by inject()&#10;    private val serviceScope = CoroutineScope(SupervisorJob() + Dispatchers.IO)&#10;&#10;    override fun onFillRequest(&#10;        request: FillRequest,&#10;        cancellationSignal: CancellationSignal,&#10;        callback: FillCallback&#10;    ) {&#10;        val structure = request.fillContexts.last().structure&#10;        val fields = findAutofillFields(structure)&#10;&#10;        if (fields.usernameId != null &amp;&amp; fields.passwordId != null) {&#10;            serviceScope.launch {&#10;                try {&#10;                    val credentials = credentialRepository.getCredentials().first()&#10;&#10;                    val datasets = credentials.map { credential -&gt;&#10;                        val usernameValue = AutofillValue.forText(credential.username)&#10;                        val passwordValue = AutofillValue.forText(decryptPassword(credential.encryptedPassword))&#10;                        Dataset.Builder()&#10;                            .setValue(fields.usernameId, usernameValue, createRemoteViews(credential))&#10;                            .setValue(fields.passwordId, passwordValue, createRemoteViews(credential))&#10;                            .build()&#10;                    }&#10;&#10;                    val response = if (datasets.isNotEmpty()) {&#10;                        FillResponse.Builder()&#10;                            .apply { datasets.forEach { addDataset(it) } }&#10;                            .build()&#10;                    } else null&#10;&#10;                    callback.onSuccess(response)&#10;                } catch (e: Exception) {&#10;                    callback.onSuccess(null) // Handle errors gracefully&#10;                }&#10;            }&#10;        } else {&#10;            callback.onSuccess(null)&#10;        }&#10;    }&#10;&#10;    override fun onSaveRequest(&#10;        request: android.service.autofill.SaveRequest,&#10;        callback: android.service.autofill.SaveCallback&#10;    ) {&#10;        callback.onSuccess()&#10;    }&#10;&#10;    private fun findAutofillFields(structure: AssistStructure): AutofillFields {&#10;        var usernameId: AutofillId? = null&#10;        var passwordId: AutofillId? = null&#10;        val nodes = structure.windowNodeCount&#10;        for (i in 0 until nodes) {&#10;            val windowNode = structure.getWindowNodeAt(i)&#10;            val viewNodeCount = windowNode.rootViewNode.childCount&#10;            for (j in 0 until viewNodeCount) {&#10;                val viewNode = windowNode.rootViewNode.getChildAt(j)&#10;                val hint = viewNode.autofillHints?.firstOrNull()&#10;                if (hint != null) {&#10;                    if (hint.equals(&quot;username&quot;, true) || hint.equals(&quot;email&quot;, true)) {&#10;                        usernameId = viewNode.autofillId&#10;                    } else if (hint.equals(&quot;password&quot;, true)) {&#10;                        passwordId = viewNode.autofillId&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        return AutofillFields(usernameId, passwordId)&#10;    }&#10;&#10;    private fun createRemoteViews(credential: Credential): RemoteViews {&#10;        val packageName = applicationContext.packageName&#10;        val remoteViews = RemoteViews(packageName, android.R.layout.simple_list_item_1)&#10;        remoteViews.setTextViewText(android.R.id.text1, credential.serviceName)&#10;        return remoteViews&#10;    }&#10;&#10;    private fun decryptPassword(encrypted: String): String {&#10;        try {&#10;            // Base64 decode the encrypted string to get IV + encrypted bytes&#10;            val combined = android.util.Base64.decode(encrypted, android.util.Base64.DEFAULT)&#10;&#10;            // The first 16 bytes are the IV (for AES)&#10;            val iv = combined.sliceArray(0 until 16)&#10;            val encryptedBytes = combined.sliceArray(16 until combined.size)&#10;&#10;            return securityManager.decrypt(iv, encryptedBytes)&#10;        } catch (e: Exception) {&#10;            // If decryption fails, return the encrypted string as fallback&#10;            return encrypted&#10;        }&#10;    }&#10;}&#10;&#10;data class AutofillFields(&#10;    val usernameId: AutofillId?,&#10;    val passwordId: AutofillId?&#10;)&#10;" />
              <option name="updatedContent" value="package com.adilstudio.project.onevault.service&#10;&#10;import android.app.assist.AssistStructure&#10;import android.service.autofill.AutofillService&#10;import android.service.autofill.FillCallback&#10;import android.service.autofill.FillRequest&#10;import android.service.autofill.FillResponse&#10;import android.view.autofill.AutofillId&#10;import android.widget.RemoteViews&#10;import android.content.Intent&#10;import android.app.PendingIntent&#10;import android.os.CancellationSignal&#10;import com.adilstudio.project.onevault.presentation.credential.CredentialListScreen&#10;import com.adilstudio.project.onevault.domain.model.Credential&#10;import com.adilstudio.project.onevault.domain.repository.CredentialRepository&#10;import android.service.autofill.Dataset&#10;import android.view.autofill.AutofillValue&#10;import android.content.Context&#10;import android.text.TextUtils&#10;import com.adilstudio.project.onevault.data.security.SecurityManager&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.SupervisorJob&#10;import kotlinx.coroutines.flow.first&#10;import kotlinx.coroutines.launch&#10;import org.koin.android.ext.android.inject&#10;import android.os.Build&#10;import androidx.annotation.RequiresApi&#10;&#10;@RequiresApi(Build.VERSION_CODES.O)&#10;class OneVaultAutofillService : AutofillService() {&#10;    private val credentialRepository: CredentialRepository by inject()&#10;    private val securityManager: SecurityManager by inject()&#10;    private val serviceScope = CoroutineScope(SupervisorJob() + Dispatchers.IO)&#10;&#10;    override fun onFillRequest(&#10;        request: FillRequest,&#10;        cancellationSignal: CancellationSignal,&#10;        callback: FillCallback&#10;    ) {&#10;        val structure = request.fillContexts.last().structure&#10;        val fields = findAutofillFields(structure)&#10;&#10;        if (fields.usernameId != null &amp;&amp; fields.passwordId != null) {&#10;            serviceScope.launch {&#10;                try {&#10;                    val credentials = credentialRepository.getCredentials().first()&#10;&#10;                    val datasets = credentials.map { credential -&gt;&#10;                        val usernameValue = AutofillValue.forText(credential.username)&#10;                        val passwordValue = AutofillValue.forText(decryptPassword(credential.encryptedPassword))&#10;                        Dataset.Builder()&#10;                            .setValue(fields.usernameId, usernameValue, createRemoteViews(credential))&#10;                            .setValue(fields.passwordId, passwordValue, createRemoteViews(credential))&#10;                            .build()&#10;                    }&#10;&#10;                    val response = if (datasets.isNotEmpty()) {&#10;                        FillResponse.Builder()&#10;                            .apply { datasets.forEach { addDataset(it) } }&#10;                            .build()&#10;                    } else null&#10;&#10;                    callback.onSuccess(response)&#10;                } catch (e: Exception) {&#10;                    callback.onSuccess(null) // Handle errors gracefully&#10;                }&#10;            }&#10;        } else {&#10;            callback.onSuccess(null)&#10;        }&#10;    }&#10;&#10;    override fun onSaveRequest(&#10;        request: android.service.autofill.SaveRequest,&#10;        callback: android.service.autofill.SaveCallback&#10;    ) {&#10;        callback.onSuccess()&#10;    }&#10;&#10;    private fun findAutofillFields(structure: AssistStructure): AutofillFields {&#10;        var usernameId: AutofillId? = null&#10;        var passwordId: AutofillId? = null&#10;        val nodes = structure.windowNodeCount&#10;        for (i in 0 until nodes) {&#10;            val windowNode = structure.getWindowNodeAt(i)&#10;            val viewNodeCount = windowNode.rootViewNode.childCount&#10;            for (j in 0 until viewNodeCount) {&#10;                val viewNode = windowNode.rootViewNode.getChildAt(j)&#10;                val hint = viewNode.autofillHints?.firstOrNull()&#10;                if (hint != null) {&#10;                    if (hint.equals(&quot;username&quot;, true) || hint.equals(&quot;email&quot;, true)) {&#10;                        usernameId = viewNode.autofillId&#10;                    } else if (hint.equals(&quot;password&quot;, true)) {&#10;                        passwordId = viewNode.autofillId&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        return AutofillFields(usernameId, passwordId)&#10;    }&#10;&#10;    private fun createRemoteViews(credential: Credential): RemoteViews {&#10;        val packageName = applicationContext.packageName&#10;        val remoteViews = RemoteViews(packageName, android.R.layout.simple_list_item_1)&#10;        remoteViews.setTextViewText(android.R.id.text1, credential.serviceName)&#10;        return remoteViews&#10;    }&#10;&#10;    private fun decryptPassword(encrypted: String): String {&#10;        try {&#10;            // Base64 decode the encrypted string to get IV + encrypted bytes&#10;            val combined = android.util.Base64.decode(encrypted, android.util.Base64.DEFAULT)&#10;&#10;            // The first 16 bytes are the IV (for AES)&#10;            val iv = combined.sliceArray(0 until 16)&#10;            val encryptedBytes = combined.sliceArray(16 until combined.size)&#10;&#10;            return securityManager.decrypt(iv, encryptedBytes)&#10;        } catch (e: Exception) {&#10;            // If decryption fails, return the encrypted string as fallback&#10;            return encrypted&#10;        }&#10;    }&#10;}&#10;&#10;data class AutofillFields(&#10;    val usernameId: AutofillId?,&#10;    val passwordId: AutofillId?&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_add_bill_tile.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_add_bill_tile.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M19,13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>